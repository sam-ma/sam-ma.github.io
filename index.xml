<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home</title>
    <link>https://www.shenyan.me/</link>
    <description>Recent content on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Jul 2018 13:26:34 +1000</lastBuildDate>
    
        <atom:link href="https://www.shenyan.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chrome Extension by Kotlin Js</title>
      <link>https://www.shenyan.me/kotlin/chrome-extension-by-kotlin-js/</link>
      <pubDate>Sun, 08 Jul 2018 13:26:34 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/chrome-extension-by-kotlin-js/</guid>
      <description>

&lt;p&gt;This post is about the &lt;a href=&#34;https://github.com/sam-ma/uniqlo-cn-chrome-ext&#34;&gt;Uniqlo CN Chrome Extension&lt;/a&gt; which I created just for fun :)
Different parts of the code are described by the following four posts.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;#&#34;&gt;Common&lt;/a&gt; (Coming soon)&lt;!--(../chrome-extension-by-kotlin-js-common) --&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;#&#34;&gt;Content&lt;/a&gt; (Coming soon)&lt;!--(../chrome-extension-by-kotlin-js-content) --&gt;&lt;/li&gt;
&lt;li&gt;3. &lt;a href=&#34;#&#34;&gt;Background&lt;/a&gt; (Coming soon)&lt;!--(../chrome-extension-by-kotlin-js-background) --&gt;&lt;/li&gt;
&lt;li&gt;4. &lt;a href=&#34;#&#34;&gt;Wrap-up&lt;/a&gt; (Coming soon)&lt;!--(../chrome-extension-by-kotlin-js-wrap-up) --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;build&#34;&gt;Build&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Clone or download source code from &lt;span style=&#34;color:#0366d6&#34;&gt;&lt;a href=&#34;https://github.com/sam-ma/uniqlo-cn-chrome-ext&#34;&gt;github&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;2. Go to the folder which contains the source code and run &lt;code&gt;./gradlew clean build&lt;/code&gt;. A &lt;code&gt;dist&lt;/code&gt; folder will be created after the build.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Click &lt;code&gt;Window&lt;/code&gt; -&amp;gt; &lt;code&gt;Extensions&lt;/code&gt; or type &lt;code&gt;chrome://extensions/&lt;/code&gt; to open the &lt;code&gt;Extensions&lt;/code&gt; window&lt;/li&gt;
&lt;li&gt;2. Turn on &lt;code&gt;Developer mode&lt;/code&gt; of chrome&lt;/li&gt;
&lt;li&gt;3. Click &lt;code&gt;Load unpacked&lt;/code&gt; button and select the &lt;code&gt;dist&lt;/code&gt; folder of this project&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-it-does&#34;&gt;What it does&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Open any of the item of Uniqlo CN site. e.g. &lt;a href=&#34;http://www.uniqlo.cn/item.htm?spm=0.0.0.0.7Ns7k9&amp;amp;id=568194806286&amp;amp;frm=&amp;amp;&#34;&gt;this one&lt;/a&gt;
&lt;img src=&#34;img/ScreenShot1.png&#34; alt=&#34;&#34; title=&#34;ScreenShot 1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;2. Click the extension button with Uniqlo logo located at the top right corner.
&lt;img src=&#34;img/ScreenShot2.png&#34; alt=&#34;&#34; title=&#34;ScreenShot 2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;3. It will add the converted price and the link of the same item of Australian site in the page.
&lt;img src=&#34;img/ScreenShot3.png&#34; alt=&#34;&#34; title=&#34;ScreenShot 3&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://developer.chrome.com/extensions/getstarted&#34;&gt;Chrome Extension Get Started Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;https://robots.thoughtbot.com/how-to-make-a-chrome-extension&#34;&gt;How to Make a Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3. &lt;a href=&#34;https://github.com/Kotlin/kotlin-fullstack-sample&#34;&gt;Kotlin Fullstack Sample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4. &lt;a href=&#34;https://kotlinlang.org/docs/tutorials/javascript/working-with-javascript.html&#34;&gt;Working with Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5. &lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/chrome/index.d.ts&#34;&gt;index.d.ts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6. &lt;a href=&#34;https://stackoverflow.com/questions/43871637/no-access-control-allow-origin-header-is-present-on-the-requested-resource-whe&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7. &lt;a href=&#34;https://exchangeratesapi.io/api/latest&#34;&gt;Foreign Exchange Rates API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 forEach with Index</title>
      <link>https://www.shenyan.me/java/java-8-foreach-with-index/</link>
      <pubDate>Sat, 07 Jul 2018 13:40:47 +1000</pubDate>
      
      <guid>https://www.shenyan.me/java/java-8-foreach-with-index/</guid>
      <description>

&lt;p&gt;Say you have a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Item&lt;/code&gt;. You use the Java 8 API &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html#forEach-java.util.function.Consumer-&#34;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt; to iterate over the list and print the items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;Item&amp;gt; items = ...
items.forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Item{name=&#39;apple&#39;, quantity=6}
Item{name=&#39;orange&#39;, quantity=12}
Item{name=&#39;kiwi&#39;, quantity=8}
Item{name=&#39;banana&#39;, quantity=4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you would like to print the items along &lt;span style=&#34;color:#0366d6&#34;&gt;with the index&lt;/span&gt;. Apparently &lt;code&gt;forEach&lt;/code&gt; doesn&amp;rsquo;t provide index.&lt;/p&gt;

&lt;p&gt;One trick is to use &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#range-int-int-&#34;&gt;&lt;code&gt;IntStream.range&lt;/code&gt;&lt;/a&gt; as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IntStream.range(0, items.size())
                .forEach(i -&amp;gt; System.out.println(String.format(&amp;quot; %d -&amp;gt; %s&amp;quot;, i+1, items.get(i))));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 -&amp;gt; Item{name=&#39;apple&#39;, quantity=6}
 2 -&amp;gt; Item{name=&#39;orange&#39;, quantity=12}
 3 -&amp;gt; Item{name=&#39;kiwi&#39;, quantity=8}
 4 -&amp;gt; Item{name=&#39;banana&#39;, quantity=4}
&lt;/code&gt;&lt;/pre&gt;

&lt;span style=&#34;color:#0366d6&#34;&gt;Another way is to use the plain old for loop which will always work in this case :)&lt;/span&gt;

&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; items.size(); i++)
            System.out.println(String.format(&amp;quot; %d -&amp;gt; %s&amp;quot;, i+1, items.get(i)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the full source:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package example;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ForeachTest {
    public static void main(String[] args) {
        List&amp;lt;Item&amp;gt; items = Arrays.asList(
                new Item(&amp;quot;apple&amp;quot;, 6),
                new Item(&amp;quot;orange&amp;quot;, 12),
                new Item(&amp;quot;kiwi&amp;quot;, 8),
                new Item(&amp;quot;banana&amp;quot;, 4)
        );

        items.forEach(System.out::println);

        System.out.println(&amp;quot;forEach: &amp;quot;);
        IntStream.range(0, items.size())
                .forEach(i -&amp;gt; System.out.println(String.format(&amp;quot; %d -&amp;gt; %s&amp;quot;, i+1, items.get(i))));

        System.out.println(&amp;quot;plain old for loop: &amp;quot;);
        for (int i = 0; i &amp;lt; items.size(); i++)
            System.out.println(String.format(&amp;quot; %d -&amp;gt; %s&amp;quot;, i+1, items.get(i)));

    }

    public static class Item {
        private String name;
        private int quantity;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getQuantity() {
            return quantity;
        }

        public void setQuantity(int quantity) {
            this.quantity = quantity;
        }

        public Item(String name, int quantity) {
            this.name = name;
            this.quantity = quantity;
        }

        @Override
        public String toString() {
            return &amp;quot;Item{&amp;quot; +
                    &amp;quot;name=&#39;&amp;quot; + name + &#39;\&#39;&#39; +
                    &amp;quot;, quantity=&amp;quot; + quantity +
                    &#39;}&#39;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Item{name=&#39;apple&#39;, quantity=6}
Item{name=&#39;orange&#39;, quantity=12}
Item{name=&#39;kiwi&#39;, quantity=8}
Item{name=&#39;banana&#39;, quantity=4}
forEach: 
 1 -&amp;gt; Item{name=&#39;apple&#39;, quantity=6}
 2 -&amp;gt; Item{name=&#39;orange&#39;, quantity=12}
 3 -&amp;gt; Item{name=&#39;kiwi&#39;, quantity=8}
 4 -&amp;gt; Item{name=&#39;banana&#39;, quantity=4}
plain old for loop: 
 1 -&amp;gt; Item{name=&#39;apple&#39;, quantity=6}
 2 -&amp;gt; Item{name=&#39;orange&#39;, quantity=12}
 3 -&amp;gt; Item{name=&#39;kiwi&#39;, quantity=8}
 4 -&amp;gt; Item{name=&#39;banana&#39;, quantity=4}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&#34;&gt;Iterable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html&#34;&gt;IntStream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin Collections SQL Group By</title>
      <link>https://www.shenyan.me/kotlin/kotlin-collections-sql-group-by/</link>
      <pubDate>Fri, 06 Jul 2018 20:51:46 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/kotlin-collections-sql-group-by/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;https://www.shenyan.me/java/java-8-stream-sql-group-by&#34;&gt;Java 8 Stream SQL Group By&lt;/a&gt; we explored how to perform SQL similar group by and aggregation by using Java 8 stream API. This time we&amp;rsquo;re going to do it in Kotlin.&lt;/p&gt;

&lt;p&gt;First of all, we use &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Kotlin Data Class&lt;/a&gt; to implement our &lt;code&gt;Data&lt;/code&gt; class. As you can easily tell, it&amp;rsquo;s much shorter than the Java equivalent.&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
data class Data(val dcId: String, val dbGroup: String, val week: String, var acctVal: Long, var shopVal: Long, var partVal: Long, var backVal: Long) {
    fun merge(other: Data): Data {
        this.acctVal += other.acctVal;
        this.shopVal += other.shopVal;
        this.partVal += other.partVal;
        this.backVal += other.backVal;
        return this;
    }
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We use the &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html&#34;&gt;&lt;code&gt;listof&lt;/code&gt;&lt;/a&gt; to initialize our test data, which is similar to &lt;code&gt;Arrays.asList&lt;/code&gt; Java API.&lt;/p&gt;

&lt;p&gt;Our calculation starts from &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html&#34;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; which takes a lambda expression &lt;code&gt;{ it.dcId }&lt;/code&gt; as parameter to specify the groupBy key. After that we will get a &lt;code&gt;Map&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt;&lt;/code&gt;, where the key is &lt;code&gt;dcId&lt;/code&gt; and value is a list of &lt;code&gt;Data&lt;/code&gt; associated with the key.&lt;/p&gt;

&lt;p&gt;Then we use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-values.html&#34;&gt;&lt;code&gt;mapValues&lt;/code&gt;&lt;/a&gt; to process the grouped list of &lt;code&gt;Data&lt;/code&gt; further. It accepts a transform function. In this function &lt;code&gt;{ it.value.groupBy { it.dbGroup } }&lt;/code&gt; we use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html&#34;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; again to further group data by &lt;code&gt;dbGroup&lt;/code&gt;. After that we will get a &lt;code&gt;Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We do the same to group data by &lt;code&gt;week&lt;/code&gt; further. At this stage we are done with groupBy. We now use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html&#34;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; to aggregation grouped data.&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
data.groupBy { it.dcId /* it: Data */ }
    .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
        it.value.groupBy { it.dbGroup /* it: Data */ }
                .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                    it.value.groupBy { it.week /* it: Data */ }
                            .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                                it.value.reduce(Data::merge)
                            }
                }
    }

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Finally we use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flat-map.html&#34;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; to collect the result list.&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
.flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt;&amp;gt; */
    it.value.flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt; */
                it.value.map { /* it: Map.Entry&amp;lt;String, Data&amp;gt; */
                            it.value
                        }
            }
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Here is the full source:
&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
data class Data(val dcId: String, val dbGroup: String, val week: String, var acctVal: Long, var shopVal: Long, var partVal: Long, var backVal: Long) {
    fun merge(other: Data): Data {
        this.acctVal += other.acctVal;
        this.shopVal += other.shopVal;
        this.partVal += other.partVal;
        this.backVal += other.backVal;
        return this;
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    val data = listOf(
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 111L, 211L, 311L, 411L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 121L, 221L, 321L, 421L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 131L, 231L, 331L, 431L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 141L, 241L, 341L, 441L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 112L, 212L, 312L, 412L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 122L, 222L, 322L, 422L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 132L, 232L, 332L, 432L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 142L, 242L, 342L, 442L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 111L, 211L, 311L, 411L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 121L, 221L, 321L, 421L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 131L, 231L, 331L, 431L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 141L, 241L, 341L, 441L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 112L, 212L, 312L, 412L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 122L, 222L, 322L, 422L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 132L, 232L, 332L, 432L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 142L, 242L, 342L, 442L)
    )

    println(&amp;#34;Before merge:&amp;#34;)
    data.forEach { println(it) }
    val mergedData /* : List&amp;lt;Data&amp;gt; */ = data.groupBy { it.dcId /* it: Data */ }
            .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                it.value.groupBy { it.dbGroup /* it: Data */ }
                        .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                            it.value.groupBy { it.week /* it: Data */ }
                                    .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                                        it.value.reduce(Data::merge)
                                    }
                        }
            }
            .flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt;&amp;gt; */
                it.value.flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt; */
                            it.value.map { /* it: Map.Entry&amp;lt;String, Data&amp;gt; */
                                        it.value
                                    }
                        }
            }
    println(&amp;#34;After merge:&amp;#34;)
    mergedData.forEach { println(it) }
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Kotlin Data Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html&#34;&gt;Kotlin Collections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 Stream Set to Map</title>
      <link>https://www.shenyan.me/java/java-8-stream-set-to-map/</link>
      <pubDate>Tue, 03 Jul 2018 21:32:14 +1000</pubDate>
      
      <guid>https://www.shenyan.me/java/java-8-stream-set-to-map/</guid>
      <description>

&lt;p&gt;Say you have a &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Set&amp;lt;Student&amp;gt; studentSet = ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[Student{id=&#39;02&#39;, first=&#39;John&#39;, last=&#39;Hay&#39;}
, Student{id=&#39;03&#39;, first=&#39;Matt&#39;, last=&#39;Simpson&#39;}
, Student{id=&#39;01&#39;, first=&#39;Dick&#39;, last=&#39;Smith&#39;}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You would like to convert it into a &lt;code&gt;Map&lt;/code&gt; where key is the &lt;code&gt;ID&lt;/code&gt; of the &lt;code&gt;Student&lt;/code&gt; and value is the &lt;code&gt;Student&lt;/code&gt; object itself.&lt;/p&gt;

&lt;p&gt;Here is how it can be done by using Java 8 Stream API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, Student&amp;gt; map = studentSet.stream()
                                .collect(Collectors.toMap(Student::getId,
                                            Function.identity()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{01=Student{id=&#39;01&#39;, first=&#39;Dick&#39;, last=&#39;Smith&#39;}
, 02=Student{id=&#39;02&#39;, first=&#39;John&#39;, last=&#39;Hay&#39;}
, 03=Student{id=&#39;03&#39;, first=&#39;Matt&#39;, last=&#39;Simpson&#39;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toMap-java.util.function.Function-java.util.function.Function-&#34;&gt;&lt;code&gt;Collectors.toMap&lt;/code&gt;&lt;/a&gt; is used to collect the stream as &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first argument is a mapping &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html&#34;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; to produce keys. Here &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;method reference&lt;/a&gt; &lt;code&gt;Student::getId&lt;/code&gt; is specified. Semantically it is the same as the lambda expression &lt;code&gt;student -&amp;gt; student.getId()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument is a mapping &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html&#34;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; to produce values. Here &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html#identity--&#34;&gt;&lt;code&gt;Function.identity&lt;/code&gt;&lt;/a&gt; is used which is semantically the same as the lambda expression &lt;code&gt;student -&amp;gt; student&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the full source:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package example;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

public class SetToMapTest {
    public static void main(String[] args) {
        Set&amp;lt;Student&amp;gt; studentSet = new HashSet&amp;lt;&amp;gt;();
        studentSet.add(new Student(&amp;quot;01&amp;quot;, &amp;quot;Dick&amp;quot;, &amp;quot;Smith&amp;quot;));
        studentSet.add(new Student(&amp;quot;02&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Hay&amp;quot;));
        studentSet.add(new Student(&amp;quot;03&amp;quot;, &amp;quot;Matt&amp;quot;, &amp;quot;Simpson&amp;quot;));
        System.out.println(studentSet);

        Map&amp;lt;String, Student&amp;gt; map = studentSet.stream()
                .collect(Collectors.toMap(Student::getId,
                        Function.identity()));

        System.out.println(map);
    }

    public static class Student {
        private String id;
        private String first;
        private String last;

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getFirst() {
            return first;
        }

        public void setFirst(String first) {
            this.first = first;
        }

        public String getLast() {
            return last;
        }

        public void setLast(String last) {
            this.last = last;
        }

        public Student(String id, String first, String last) {
            this.id = id;
            this.first = first;
            this.last = last;
        }

        @Override
        public String toString() {
            return &amp;quot;Student{&amp;quot; +
                    &amp;quot;id=&#39;&amp;quot; + id + &#39;\&#39;&#39; +
                    &amp;quot;, first=&#39;&amp;quot; + first + &#39;\&#39;&#39; +
                    &amp;quot;, last=&#39;&amp;quot; + last + &#39;\&#39;&#39; +
                    &amp;quot;}\n&amp;quot;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Student{id=&#39;02&#39;, first=&#39;John&#39;, last=&#39;Hay&#39;}
, Student{id=&#39;03&#39;, first=&#39;Matt&#39;, last=&#39;Simpson&#39;}
, Student{id=&#39;01&#39;, first=&#39;Dick&#39;, last=&#39;Smith&#39;}
]
{01=Student{id=&#39;01&#39;, first=&#39;Dick&#39;, last=&#39;Smith&#39;}
, 02=Student{id=&#39;02&#39;, first=&#39;John&#39;, last=&#39;Hay&#39;}
, 03=Student{id=&#39;03&#39;, first=&#39;Matt&#39;, last=&#39;Simpson&#39;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html&#34;&gt;Java 8 Collectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 Stream SQL Group By</title>
      <link>https://www.shenyan.me/java/java-8-stream-sql-group-by/</link>
      <pubDate>Mon, 02 Jul 2018 21:34:19 +1000</pubDate>
      
      <guid>https://www.shenyan.me/java/java-8-stream-sql-group-by/</guid>
      <description>

&lt;p&gt;This is a scenario that I faced in the real world. I had to query data from multiple sources and merge/aggregate by multiple fields manually.&lt;/p&gt;

&lt;p&gt;Here is how I solved it by using Java 8 stream API.&lt;/p&gt;

&lt;p&gt;Firstly, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-java.util.stream.Collector-&#34;&gt;&lt;code&gt;Collectors.groupingBy&lt;/code&gt;&lt;/a&gt; is used nestly to group by the three fields.&lt;/p&gt;

&lt;p&gt;The first argument is a &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html&#34;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; which representing the classifier. Here &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;method reference&lt;/a&gt; &lt;code&gt;Data::getDcId&lt;/code&gt; is specified. Semantically it is the same as the lambda expression &lt;code&gt;data -&amp;gt; data.getDcId()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument let us specify another &lt;code&gt;Collector&lt;/code&gt; which is called a &lt;strong&gt;downstream&lt;/strong&gt; collector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data.stream()
        .collect(Collectors.groupingBy(Data::getDcId,
                Collectors.groupingBy(Data::getDbGroup,
                Collectors.groupingBy(Data::getWeek,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#reducing-java.util.function.BinaryOperator-&#34;&gt;&lt;code&gt;Collectors.reducing&lt;/code&gt;&lt;/a&gt; is used to aggregate grouped data. The argument is a &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/function/BinaryOperator.html&#34;&gt;&lt;code&gt;BinaryOperator&lt;/code&gt;&lt;/a&gt; which is a specialization of &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/function/BiFunction.html&#34;&gt;&lt;code&gt;BiFunction&lt;/code&gt;&lt;/a&gt; where the two operands and the result are all of the same type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data.stream()
        .collect(
            ...
                Collectors.reducing(Data::merge)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage &lt;code&gt;Map&amp;lt;String, Map&amp;lt;String, Map&amp;lt;String, Optional&amp;lt;Data&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; is returned. &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&#34;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; is used twice to convert the nested map to a &lt;code&gt;Optional&amp;lt;Data&amp;gt;&lt;/code&gt; stream.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data.stream()
        .collect(
            ...
                )
    .values().stream()
                .flatMap(v -&amp;gt; v.values().stream())
                .flatMap(v -&amp;gt; v.values().stream())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also want to get an ordered result. So &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-&#34;&gt;&lt;code&gt;sorted&lt;/code&gt;&lt;/a&gt; is used to sort the result stream. To specify multiple fields to sort on, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-&#34;&gt;&lt;code&gt;Comparator.comparing&lt;/code&gt;&lt;/a&gt; combined with &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparing-java.util.Comparator-&#34;&gt;&lt;code&gt;thenComparing&lt;/code&gt;&lt;/a&gt; are used as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sorted(Comparator.comparing(Data::getDcId)
            .thenComparing(Comparator.comparing(Data::getDbGroup))
            .thenComparing(Comparator.comparing(Data::getWeek)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we collect the result stream as list by using &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toList--&#34;&gt;&lt;code&gt;Collectors.toList&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
    List&amp;lt;Data&amp;gt; data = Arrays.asList(
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 111L, 211L, 311L, 411L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 121L, 221L, 321L, 421L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 131L, 231L, 331L, 431L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 141L, 241L, 341L, 441L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 112L, 212L, 312L, 412L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 122L, 222L, 322L, 422L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 132L, 232L, 332L, 432L),
            new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 142L, 242L, 342L, 442L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 111L, 211L, 311L, 411L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 121L, 221L, 321L, 421L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 131L, 231L, 331L, 431L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 141L, 241L, 341L, 441L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 112L, 212L, 312L, 412L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 122L, 222L, 322L, 422L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 132L, 232L, 332L, 432L),
            new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 142L, 242L, 342L, 442L)
    );
    System.out.println(&amp;quot;Before merge:&amp;quot;);
    data.forEach(System.out::println);
    List&amp;lt;Data&amp;gt; mergedData = data.stream()
        .collect(Collectors.groupingBy(Data::getDcId,
                Collectors.groupingBy(Data::getDbGroup,
                Collectors.groupingBy(Data::getWeek,
                        Collectors.reducing(Data::merge)))))
        .values().stream()
                .flatMap(v -&amp;gt; v.values().stream())
                .flatMap(v -&amp;gt; v.values().stream())
                .map(Optional::get)
                .sorted(Comparator.comparing(Data::getDcId)
                        .thenComparing(Comparator.comparing(Data::getDbGroup))
                        .thenComparing(Comparator.comparing(Data::getWeek)))
                .collect(Collectors.toList());
    System.out.println(&amp;quot;After merge:&amp;quot;);
    mergedData.forEach(System.out::println);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before merge:
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week1&#39;, acctVal=111, shopVal=211, partVal=311, backVal=411}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week1&#39;, acctVal=121, shopVal=221, partVal=321, backVal=421}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week1&#39;, acctVal=131, shopVal=231, partVal=331, backVal=431}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week1&#39;, acctVal=141, shopVal=241, partVal=341, backVal=441}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week2&#39;, acctVal=112, shopVal=212, partVal=312, backVal=412}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week2&#39;, acctVal=122, shopVal=222, partVal=322, backVal=422}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week2&#39;, acctVal=132, shopVal=232, partVal=332, backVal=432}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week2&#39;, acctVal=142, shopVal=242, partVal=342, backVal=442}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week1&#39;, acctVal=111, shopVal=211, partVal=311, backVal=411}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week1&#39;, acctVal=121, shopVal=221, partVal=321, backVal=421}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week1&#39;, acctVal=131, shopVal=231, partVal=331, backVal=431}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week1&#39;, acctVal=141, shopVal=241, partVal=341, backVal=441}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week2&#39;, acctVal=112, shopVal=212, partVal=312, backVal=412}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week2&#39;, acctVal=122, shopVal=222, partVal=322, backVal=422}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week2&#39;, acctVal=132, shopVal=232, partVal=332, backVal=432}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week2&#39;, acctVal=142, shopVal=242, partVal=342, backVal=442}
After merge:
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week1&#39;, acctVal=242, shopVal=442, partVal=642, backVal=842}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week2&#39;, acctVal=244, shopVal=444, partVal=644, backVal=844}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week1&#39;, acctVal=262, shopVal=462, partVal=662, backVal=862}
Data{dcId=&#39;dc000&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week2&#39;, acctVal=264, shopVal=464, partVal=664, backVal=864}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week1&#39;, acctVal=242, shopVal=442, partVal=642, backVal=842}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup01&#39;, week=&#39;week2&#39;, acctVal=244, shopVal=444, partVal=644, backVal=844}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week1&#39;, acctVal=262, shopVal=462, partVal=662, backVal=862}
Data{dcId=&#39;dc001&#39;, dbGroup=&#39;dbGroup02&#39;, week=&#39;week2&#39;, acctVal=264, shopVal=464, partVal=664, backVal=864}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the full source:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package example;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class DataGroupByTest {
    public static void main(String[] args) {
        List&amp;lt;Data&amp;gt; data = Arrays.asList(
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 111L, 211L, 311L, 411L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 121L, 221L, 321L, 421L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 131L, 231L, 331L, 431L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 141L, 241L, 341L, 441L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 112L, 212L, 312L, 412L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 122L, 222L, 322L, 422L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 132L, 232L, 332L, 432L),
                new Data(&amp;quot;dc000&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 142L, 242L, 342L, 442L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 111L, 211L, 311L, 411L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 121L, 221L, 321L, 421L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week1&amp;quot;, 131L, 231L, 331L, 431L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week1&amp;quot;, 141L, 241L, 341L, 441L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 112L, 212L, 312L, 412L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 122L, 222L, 322L, 422L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup01&amp;quot;, &amp;quot;week2&amp;quot;, 132L, 232L, 332L, 432L),
                new Data(&amp;quot;dc001&amp;quot;, &amp;quot;dbGroup02&amp;quot;, &amp;quot;week2&amp;quot;, 142L, 242L, 342L, 442L)
        );
        System.out.println(&amp;quot;Before merge:&amp;quot;);
        data.forEach(System.out::println);
        List&amp;lt;Data&amp;gt; mergedData = data.stream().collect(Collectors.groupingBy(Data::getDcId,
                Collectors.groupingBy(Data::getDbGroup,
                        Collectors.groupingBy(Data::getWeek,
                                Collectors.reducing(Data::merge)))))
                .values().stream()
                            .flatMap(v -&amp;gt; v.values().stream())
                            .flatMap(v -&amp;gt; v.values().stream())
                            .map(Optional::get)
                            .sorted(Comparator.comparing(Data::getDcId)
                                    .thenComparing(Comparator.comparing(Data::getDbGroup))
                                    .thenComparing(Comparator.comparing(Data::getWeek)))
                            .collect(Collectors.toList());
        System.out.println(&amp;quot;After merge:&amp;quot;);
        mergedData.forEach(System.out::println);
    }

    public static class Data {
        private String dcId;
        private String dbGroup;
        private String week;
        private Long acctVal;
        private Long shopVal;
        private Long partVal;
        private Long backVal;

        public String getDcId() {
            return dcId;
        }

        public void setDcId(String dcId) {
            this.dcId = dcId;
        }

        public String getDbGroup() {
            return dbGroup;
        }

        public void setDbGroup(String dbGroup) {
            this.dbGroup = dbGroup;
        }

        public String getWeek() {
            return week;
        }

        public void setWeek(String week) {
            this.week = week;
        }

        public Long getAcctVal() {
            return acctVal;
        }

        public void setAcctVal(Long acctVal) {
            this.acctVal = acctVal;
        }

        public Long getShopVal() {
            return shopVal;
        }

        public void setShopVal(Long shopVal) {
            this.shopVal = shopVal;
        }

        public Long getPartVal() {
            return partVal;
        }

        public void setPartVal(Long partVal) {
            this.partVal = partVal;
        }

        public Long getBackVal() {
            return backVal;
        }

        public void setBackVal(Long backVal) {
            this.backVal = backVal;
        }

        public Data(String dcId, String dbGroup, String week, Long acctVal, Long shopVal, Long partVal, Long backVal) {
            this.dcId = dcId;
            this.dbGroup = dbGroup;
            this.week = week;
            this.acctVal = acctVal;
            this.shopVal = shopVal;
            this.partVal = partVal;
            this.backVal = backVal;
        }

        public Data merge(Data other) {
            this.acctVal = this.acctVal + other.acctVal;
            this.shopVal = this.shopVal + other.shopVal;
            this.partVal = this.partVal + other.partVal;
            this.backVal = this.backVal + other.backVal;
            return this;
        }

        @Override
        public String toString() {
            return &amp;quot;Data{&amp;quot; +
                    &amp;quot;dcId=&#39;&amp;quot; + dcId + &#39;\&#39;&#39; +
                    &amp;quot;, dbGroup=&#39;&amp;quot; + dbGroup + &#39;\&#39;&#39; +
                    &amp;quot;, week=&#39;&amp;quot; + week + &#39;\&#39;&#39; +
                    &amp;quot;, acctVal=&amp;quot; + acctVal +
                    &amp;quot;, shopVal=&amp;quot; + shopVal +
                    &amp;quot;, partVal=&amp;quot; + partVal +
                    &amp;quot;, backVal=&amp;quot; + backVal +
                    &#39;}&#39;;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html&#34;&gt;Java 8 Collectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Rust Shortcodes</title>
      <link>https://www.shenyan.me/rust/hugo-rust-shortcodes/</link>
      <pubDate>Sat, 30 Jun 2018 13:54:34 +1000</pubDate>
      
      <guid>https://www.shenyan.me/rust/hugo-rust-shortcodes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;Hugo Rust shortcodes&lt;/a&gt; can be used to embed Rust code just like &lt;a href=&#34;https://doc.rust-lang.org/book/second-edition/ch01-02-hello-world.html&#34;&gt;Rust book&lt;/a&gt; into Hugo sites.&lt;/p&gt;

&lt;h2 id=&#34;set-up&#34;&gt;Set up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Copy &lt;code&gt;layouts/shortcodes/rust.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/shortcodes/rust.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2. Copy &lt;code&gt;static/css/rust.css&lt;/code&gt; to &lt;code&gt;[your hugo site home]/static/css/rust.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3. Copy &lt;code&gt;static/js/rust.js&lt;/code&gt; to &lt;code&gt;[your hugo site home]/static/js/rust.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4. Copy &lt;code&gt;[your hugo site home]/themes/[the theme you choose]/layouts/partials/head.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/partials/header.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;5. Open the copied &lt;code&gt;header.html&lt;/code&gt; and add the followings into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/rust.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Site.BaseURL }}css/rust.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.css&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;6. Copy &lt;code&gt;[your hugo site home]/themes/[the theme you choose]/layouts/partials/footer.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/partials/footer.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;7. Open the copied &lt;code&gt;footer.html&lt;/code&gt; and add the followings before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Site.BaseURL }}js/rust.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;how-to-use-live-demo&#34;&gt;How to use / Live Demo&lt;/h2&gt;

&lt;p&gt;The following examples demonstrates how to embed &lt;a href=&#34;https://doc.rust-lang.org/book/second-edition/ch01-02-hello-world.html&#34;&gt;Rust book examples&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Basic example&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rust &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;{{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;rust &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;


&lt;pre&gt;&lt;pre class=&#34;playpen&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    println!(&amp;#34;Hello, world!&amp;#34;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;2. Hide lines with &lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rust &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;{{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;rust &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;


&lt;pre&gt;&lt;pre class=&#34;playpen&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;#fn main() {
    println!(&amp;#34;Hello, world!&amp;#34;);
#}&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Rust Shortcodes Example</title>
      <link>https://www.shenyan.me/rust/hugo-rust-example/</link>
      <pubDate>Wed, 27 Jun 2018 21:25:31 +1000</pubDate>
      
      <guid>https://www.shenyan.me/rust/hugo-rust-example/</guid>
      <description>&lt;p&gt;This is the live demo page for the &lt;code&gt;{{&amp;lt; rust &amp;gt;}}&lt;/code&gt; hugo shortcode&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;https://github.com/sam-ma/hugo-shortcodes&lt;/a&gt;&lt;/p&gt;


&lt;pre&gt;&lt;pre class=&#34;playpen&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    println!(&amp;#34;Hello, world!&amp;#34;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;pre class=&#34;playpen&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;#fn main() {
    println!(&amp;#34;Hello, world!&amp;#34;);
#}&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title> jQuery Additional Form Data on Submit</title>
      <link>https://www.shenyan.me/jquery/jquery-additional-form-data-on-submit/</link>
      <pubDate>Tue, 26 Jun 2018 21:29:08 +1000</pubDate>
      
      <guid>https://www.shenyan.me/jquery/jquery-additional-form-data-on-submit/</guid>
      <description>

&lt;h2 id=&#34;problem&#34;&gt;Problem:&lt;/h2&gt;

&lt;p&gt;Suppose you would like to use &lt;code&gt;jQuery&lt;/code&gt; to submit a form with additional data.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;input&amp;gt;&amp;#34;&lt;/span&gt;)
               .&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;)
               .&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myname&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myvalue&amp;#34;&lt;/span&gt;)
               .&lt;span style=&#34;color:#a6e22e&#34;&gt;appendTo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#myform&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;myname&lt;/span&gt; to the parameter name you want to associate with the value.&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;myvalue&lt;/span&gt; to the value you want to submit&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;myform&lt;/span&gt; to the id of the form you would like to submit&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;http://api.jquery.com/jquery/#jQuery-html-attributes&#34;&gt;jQuery API Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;https://stackoverflow.com/questions/2530635/jquery-add-additional-parameters-on-submit-not-ajax&#34;&gt;Stackoverflow related question&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Kotlin Shortcodes</title>
      <link>https://www.shenyan.me/kotlin/hugo-kotlin-shortcodes/</link>
      <pubDate>Mon, 25 Jun 2018 20:51:24 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/hugo-kotlin-shortcodes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;Hugo Kotlin shortcodes&lt;/a&gt; can be used to &lt;a href=&#34;https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/&#34;&gt;embed kotlin playground&lt;/a&gt; into Hugo sites.&lt;/p&gt;

&lt;h2 id=&#34;set-up&#34;&gt;Set up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Copy &lt;code&gt;layouts/shortcodes/kotlin.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/shortcodes/kotlin.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2. Copy &lt;code&gt;[your hugo site home]/themes/[the theme you choose]/layouts/partials/head.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/partials/header.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3. Open the copied &lt;code&gt;header.html&lt;/code&gt; and add the followings into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- kotlin playground script --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://unpkg.com/kotlin-playground@1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data-selector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.kotlin-code&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- highlight css --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- highlight script --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/kotlin.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hljs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;initHighlightingOnLoad&lt;/span&gt;();&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;how-to-use-live-demo&#34;&gt;How to use / Live Demo&lt;/h2&gt;

&lt;p&gt;The following examples demonstrates how to embed &lt;a href=&#34;https://jetbrains.github.io/kotlin-playground/examples/&#34;&gt;kotlin playground examples&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Basic example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Contact&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; email: String) 
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; contact = Contact(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mary@gmail.com&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6&lt;/span&gt;    println(contact.id)                   
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;8&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
class Contact(val id: Int, var email: String) 

fun main(args: Array&amp;lt;String&amp;gt;) {
    val contact = Contact(1, &amp;#34;mary@gmail.com&amp;#34;)
    println(contact.id)                   
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;2. Example using &lt;code&gt;theme&lt;/code&gt; and &lt;code&gt;highlight-only&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin theme=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;idea&amp;#34;&lt;/span&gt; highlight-only=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;idea&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;3. Example using &lt;code&gt;darcula&lt;/code&gt; theme&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin theme=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darcula&amp;#34;&lt;/span&gt; highlight-only=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;4. Example using &lt;code&gt;platform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(a: Int, b: Int): Int {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a + b
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7&lt;/span&gt;    print(sum(-&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;8&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;9&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;js&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun sum(a: Int, b: Int): Int {
    return a + b
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;5. Example using &lt;code&gt;junit&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;junit&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Test
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Assert
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestExtensionFunctions&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testIntExtension&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7&lt;/span&gt;        Assert.assertEquals(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rational number creation error: &amp;#34;&lt;/span&gt;, RationalNumber(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;r())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPairExtension&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11&lt;/span&gt;        Assert.assertEquals(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rational number creation error: &amp;#34;&lt;/span&gt;, RationalNumber(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), Pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).r())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleStart
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;.r(): RationalNumber = RationalNumber(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RationalNumber&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; numerator: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; denominator: Int)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleEnd
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestExtensionFunctions() {
    @Test fun testIntExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(4, 1), 4.r())
    }

    @Test fun testPairExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(2, 3), Pair(2, 3).r())
    }
}
//sampleStart
/*
Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
*/
fun Int.r(): RationalNumber = RationalNumber(this, 2)
fun Pair&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)

data class RationalNumber(val numerator: Int, val denominator: Int)
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;6. Example using &lt;code&gt;folded-button&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;junit&amp;#34;&lt;/span&gt; folded-button=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Test
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Assert
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestContainsFunctions&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7&lt;/span&gt;        Assert.assertTrue(containsEven(listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notContains&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10&lt;/span&gt;        Assert.assertFalse(containsEven(listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleStart
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Pass a lambda to any function to check if the collection contains an even number.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsEven&lt;/span&gt;(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {&lt;span style=&#34;color:#a6e22e&#34;&gt;[mark]&lt;/span&gt;TODO()&lt;span style=&#34;color:#a6e22e&#34;&gt;[/mark]&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleEnd
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    folded-button=&#34;false&#34;
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestContainsFunctions() {
    @Test fun contains() {
        Assert.assertTrue(containsEven(listOf(1, 2, 3, 4)));
    }
    @Test fun notContains() {
        Assert.assertFalse(containsEven(listOf(1, 3, 5)));
    }
}
//sampleStart
/*
Pass a lambda to any function to check if the collection contains an even number.
The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
*/
fun containsEven(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {[mark]TODO()[/mark]}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7. Example using &lt;code&gt;canvas&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; fancylines
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; jquery.*
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.w3c.dom.CanvasRenderingContext2D
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.w3c.dom.HTMLCanvasElement
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; kotlin.browser.document
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; kotlin.browser.window
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; kotlin.js.Math
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; canvas = initalizeCanvas()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initalizeCanvas&lt;/span&gt;(): HTMLCanvasElement {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; canvas = document.createElement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HTMLCanvasElement
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; context = canvas.getContext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CanvasRenderingContext2D
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18&lt;/span&gt;    context.canvas.width  = window.innerWidth.toInt();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19&lt;/span&gt;    context.canvas.height = window.innerHeight.toInt();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20&lt;/span&gt;    document.body&lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;.appendChild(canvas)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;21&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; canvas
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;22&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;23&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FancyLines&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;25&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; context = canvas.getContext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CanvasRenderingContext2D
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;26&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; height = canvas.height
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;27&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; width = canvas.width
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;28&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; x = width * Math.random()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;29&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; y = height * Math.random()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;30&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hue = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;31&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;32&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;33&lt;/span&gt;        context.save();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;34&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;35&lt;/span&gt;        context.beginPath();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;36&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;37&lt;/span&gt;        context.lineWidth = &lt;span style=&#34;color:#ae81ff&#34;&gt;20.0&lt;/span&gt; * Math.random();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;38&lt;/span&gt;        context.moveTo(x, y);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;39&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;40&lt;/span&gt;        x = width * Math.random();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;41&lt;/span&gt;        y = height * Math.random();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;42&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;43&lt;/span&gt;        context.bezierCurveTo(width * Math.random(), height * Math.random(),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;44&lt;/span&gt;                width * Math.random(), height * Math.random(), x, y);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;45&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;46&lt;/span&gt;        hue += (Math.random() * &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;).toInt();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;47&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;48&lt;/span&gt;        context.strokeStyle = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hsl($hue, 50%, 50%)&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;49&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;50&lt;/span&gt;        context.shadowColor = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;51&lt;/span&gt;        context.shadowBlur = &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;52&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;53&lt;/span&gt;        context.stroke();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;54&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;55&lt;/span&gt;        context.restore();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;56&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;57&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;58&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blank&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;59&lt;/span&gt;        context.fillStyle = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rgba(255,255,1,0.1)&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;60&lt;/span&gt;        context.fillRect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, width.toDouble(), height.toDouble());
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;61&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;62&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;63&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;64&lt;/span&gt;        window.setInterval({ line() }, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;65&lt;/span&gt;        window.setInterval({ blank() }, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;66&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;67&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleStart
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;70&lt;/span&gt;    FancyLines().run()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;71&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleEnd
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;73&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;canvas&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
package fancylines


import jquery.*
import org.w3c.dom.CanvasRenderingContext2D
import org.w3c.dom.HTMLCanvasElement
import kotlin.browser.document
import kotlin.browser.window
import kotlin.js.Math



val canvas = initalizeCanvas()
fun initalizeCanvas(): HTMLCanvasElement {
    val canvas = document.createElement(&amp;#34;canvas&amp;#34;) as HTMLCanvasElement
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    context.canvas.width  = window.innerWidth.toInt();
    context.canvas.height = window.innerHeight.toInt();
    document.body!!.appendChild(canvas)
    return canvas
}

class FancyLines() {
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    val height = canvas.height
    val width = canvas.width
    var x = width * Math.random()
    var y = height * Math.random()
    var hue = 0;

    fun line() {
        context.save();

        context.beginPath();

        context.lineWidth = 20.0 * Math.random();
        context.moveTo(x, y);

        x = width * Math.random();
        y = height * Math.random();

        context.bezierCurveTo(width * Math.random(), height * Math.random(),
                width * Math.random(), height * Math.random(), x, y);

        hue += (Math.random() * 10).toInt();

        context.strokeStyle = &amp;#34;hsl($hue, 50%, 50%)&amp;#34;;

        context.shadowColor = &amp;#34;white&amp;#34;;
        context.shadowBlur = 10.0;

        context.stroke();

        context.restore();
    }

    fun blank() {
        context.fillStyle = &amp;#34;rgba(255,255,1,0.1)&amp;#34;;
        context.fillRect(0.0, 0.0, width.toDouble(), height.toDouble());
    }

    fun run() {
        window.setInterval({ line() }, 40);
        window.setInterval({ blank() }, 100);
    }
}
//sampleStart
fun main(args: Array&amp;lt;String&amp;gt;) {
    FancyLines().run()
}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>curl: (23) Failed writing body</title>
      <link>https://www.shenyan.me/other/curl-23-failed-writing-body/</link>
      <pubDate>Sat, 23 Jun 2018 21:41:08 +1000</pubDate>
      
      <guid>https://www.shenyan.me/other/curl-23-failed-writing-body/</guid>
      <description>

&lt;p&gt;I was trying to get the first few lines of a large CSV file (144M) by piping the &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; command as shown below. However, it didn&amp;rsquo;t work as expected. No file content was displayed but the progress meter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -LO http://burntsushi.net/stuff/worldcitiespop.csv | head
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   194  100   194    0     0    153      0  0:00:01  0:00:01 --:--:--   153
100  144M  100  144M    0     0   514k      0  0:04:47  0:04:47 --:--:--  908k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Due to the &lt;code&gt;-O&lt;/code&gt; option the output was written to a local file rather than stdout.&lt;/p&gt;

&lt;p&gt;Btw, &lt;code&gt;-L&lt;/code&gt; tells &lt;code&gt;curl&lt;/code&gt; to follow redirections.&lt;/p&gt;

&lt;p&gt;Replacing &lt;code&gt;-O&lt;/code&gt; with &lt;code&gt;-sS&lt;/code&gt; solved the above problem. However, another issue appeared. This time &lt;code&gt;curl: (23) Failed writing body&lt;/code&gt; error was shown at the bottm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -LsS http://burntsushi.net/stuff/worldcitiespop.csv | head
Country,City,AccentCity,Region,Population,Latitude,Longitude
ad,aixas,Aixàs,06,,42.4833333,1.4666667
ad,aixirivali,Aixirivali,06,,42.4666667,1.5
ad,aixirivall,Aixirivall,06,,42.4666667,1.5
ad,aixirvall,Aixirvall,06,,42.4666667,1.5
ad,aixovall,Aixovall,06,,42.4666667,1.4833333
ad,andorra,Andorra,07,,42.5,1.5166667
ad,andorra la vella,Andorra la Vella,07,20430,42.5,1.5166667
ad,andorra-vieille,Andorra-Vieille,07,,42.5,1.5166667
ad,andorre,Andorre,07,,42.5,1.5166667
curl: (23) Failed writing body (0 != 16384)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color:blue&#34;&gt;&lt;strong&gt;Looks like it&amp;rsquo;s because the piped &lt;code&gt;head&lt;/code&gt; closed the read pipe before &lt;code&gt;curl&lt;/code&gt; finished writing output.&lt;/strong&gt;&lt;/span&gt; Someone suggested to add &lt;code&gt;-N&lt;/code&gt; to disable buffer. Unfortunately, it still didn&amp;rsquo;t work :(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -LsSN http://burntsushi.net/stuff/worldcitiespop.csv | head
Country,City,AccentCity,Region,Population,Latitude,Longitude
ad,aixas,Aixàs,06,,42.4833333,1.4666667
ad,aixirivali,Aixirivali,06,,42.4666667,1.5
ad,aixirivall,Aixirivall,06,,42.4666667,1.5
ad,aixirvall,Aixirvall,06,,42.4666667,1.5
ad,aixovall,Aixovall,06,,42.4666667,1.4833333
ad,andorra,Andorra,07,,42.5,1.5166667
ad,andorra la vella,Andorra la Vella,07,20430,42.5,1.5166667
ad,andorra-vieille,Andorra-Vieille,07,,42.5,1.5166667
ad,andorre,Andorre,07,,42.5,1.5166667
curl: (23) Failed writing body (0 != 16384)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Removing &lt;code&gt;-S&lt;/code&gt; seems to work &amp;ldquo;&lt;del&gt;perfectly&lt;/del&gt;&amp;rdquo;. However, it just suppressed the error message. But that&amp;rsquo;s enough for my case :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -LsN http://burntsushi.net/stuff/worldcitiespop.csv | head
Country,City,AccentCity,Region,Population,Latitude,Longitude
ad,aixas,Aixàs,06,,42.4833333,1.4666667
ad,aixirivali,Aixirivali,06,,42.4666667,1.5
ad,aixirivall,Aixirivall,06,,42.4666667,1.5
ad,aixirvall,Aixirvall,06,,42.4666667,1.5
ad,aixovall,Aixovall,06,,42.4666667,1.4833333
ad,andorra,Andorra,07,,42.5,1.5166667
ad,andorra la vella,Andorra la Vella,07,20430,4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sample-csv&#34;&gt;Sample CSV:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;http://burntsushi.net/stuff/worldcitiespop.csv&#34;&gt;worldcitiespop.csv&lt;/a&gt; from &lt;a href=&#34;https://github.com/BurntSushi/xsv&#34;&gt;https://github.com/BurntSushi/xsv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv&#34;&gt;Sacramentorealestatetransactions.csv&lt;/a&gt; from &lt;a href=&#34;https://support.spatialkey.com/spatialkey-sample-csv-data/&#34;&gt;https://support.spatialkey.com/spatialkey-sample-csv-data/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://stackoverflow.com/questions/16703647/why-curl-return-and-error-23-failed-writing-body&#34;&gt;Stackoverflow related question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;https://curl.haxx.se/docs/manpage.html&#34;&gt;curl man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Kotlin Shortcodes Example</title>
      <link>https://www.shenyan.me/kotlin/hugo-kotlin-example/</link>
      <pubDate>Fri, 22 Jun 2018 21:41:35 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/hugo-kotlin-example/</guid>
      <description>&lt;p&gt;This is the live demo page for the &lt;code&gt;{{&amp;lt; kotlin &amp;gt;}}&lt;/code&gt; hugo shortcode&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;https://github.com/sam-ma/hugo-shortcodes&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
class Contact(val id: Int, var email: String) 

fun main(args: Array&amp;lt;String&amp;gt;) {
    val contact = Contact(1, &amp;#34;mary@gmail.com&amp;#34;)
    println(contact.id)                   
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;idea&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;js&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun sum(a: Int, b: Int): Int {
    return a + b
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestExtensionFunctions() {
    @Test fun testIntExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(4, 1), 4.r())
    }

    @Test fun testPairExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(2, 3), Pair(2, 3).r())
    }
}
//sampleStart
/*
Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
*/
fun Int.r(): RationalNumber = RationalNumber(this, 2)
fun Pair&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)

data class RationalNumber(val numerator: Int, val denominator: Int)
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    folded-button=&#34;false&#34;
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestContainsFunctions() {
    @Test fun contains() {
        Assert.assertTrue(containsEven(listOf(1, 2, 3, 4)));
    }
    @Test fun notContains() {
        Assert.assertFalse(containsEven(listOf(1, 3, 5)));
    }
}
//sampleStart
/*
Pass a lambda to any function to check if the collection contains an even number.
The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
*/
fun containsEven(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {[mark]TODO()[/mark]}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;canvas&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
package fancylines


import jquery.*
import org.w3c.dom.CanvasRenderingContext2D
import org.w3c.dom.HTMLCanvasElement
import kotlin.browser.document
import kotlin.browser.window
import kotlin.js.Math



val canvas = initalizeCanvas()
fun initalizeCanvas(): HTMLCanvasElement {
    val canvas = document.createElement(&amp;#34;canvas&amp;#34;) as HTMLCanvasElement
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    context.canvas.width  = window.innerWidth.toInt();
    context.canvas.height = window.innerHeight.toInt();
    document.body!!.appendChild(canvas)
    return canvas
}

class FancyLines() {
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    val height = canvas.height
    val width = canvas.width
    var x = width * Math.random()
    var y = height * Math.random()
    var hue = 0;

    fun line() {
        context.save();

        context.beginPath();

        context.lineWidth = 20.0 * Math.random();
        context.moveTo(x, y);

        x = width * Math.random();
        y = height * Math.random();

        context.bezierCurveTo(width * Math.random(), height * Math.random(),
                width * Math.random(), height * Math.random(), x, y);

        hue += (Math.random() * 10).toInt();

        context.strokeStyle = &amp;#34;hsl($hue, 50%, 50%)&amp;#34;;

        context.shadowColor = &amp;#34;white&amp;#34;;
        context.shadowBlur = 10.0;

        context.stroke();

        context.restore();
    }

    fun blank() {
        context.fillStyle = &amp;#34;rgba(255,255,1,0.1)&amp;#34;;
        context.fillRect(0.0, 0.0, width.toDouble(), height.toDouble());
    }

    fun run() {
        window.setInterval({ line() }, 40);
        window.setInterval({ blank() }, 100);
    }
}
//sampleStart
fun main(args: Array&amp;lt;String&amp;gt;) {
    FancyLines().run()
}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
//sampleStart
fun sum(a: Int, b: Int): Int {
    return a + b
}
//sampleEnd

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jetbrains.github.io/kotlin-playground/examples/&#34;&gt;https://jetbrains.github.io/kotlin-playground/examples/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://www.shenyan.me/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.shenyan.me/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>