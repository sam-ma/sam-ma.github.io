<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlins on Home</title>
    <link>https://www.shenyan.me/kotlin/</link>
    <description>Recent content in Kotlins on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jun 2018 21:41:35 +1000</lastBuildDate>
    
        <atom:link href="https://www.shenyan.me/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Kotlin Shortcodes Example</title>
      <link>https://www.shenyan.me/kotlin/hugo-kotlin-example/</link>
      <pubDate>Fri, 22 Jun 2018 21:41:35 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/hugo-kotlin-example/</guid>
      <description>&lt;p&gt;This is the live demo page for the &lt;code&gt;{{&amp;lt; kotlin &amp;gt;}}&lt;/code&gt; hugo shortcode&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;https://github.com/sam-ma/hugo-shortcodes&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
class Contact(val id: Int, var email: String) 

fun main(args: Array&amp;lt;String&amp;gt;) {
    val contact = Contact(1, &amp;#34;mary@gmail.com&amp;#34;)
    println(contact.id)                   
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;idea&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;js&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun sum(a: Int, b: Int): Int {
    return a + b
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestExtensionFunctions() {
    @Test fun testIntExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(4, 1), 4.r())
    }

    @Test fun testPairExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(2, 3), Pair(2, 3).r())
    }
}
//sampleStart
/*
Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
*/
fun Int.r(): RationalNumber = RationalNumber(this, 2)
fun Pair&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)

data class RationalNumber(val numerator: Int, val denominator: Int)
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    folded-button=&#34;false&#34;
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestContainsFunctions() {
    @Test fun contains() {
        Assert.assertTrue(containsEven(listOf(1, 2, 3, 4)));
    }
    @Test fun notContains() {
        Assert.assertFalse(containsEven(listOf(1, 3, 5)));
    }
}
//sampleStart
/*
Pass a lambda to any function to check if the collection contains an even number.
The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
*/
fun containsEven(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {[mark]TODO()[/mark]}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;canvas&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
package fancylines


import jquery.*
import org.w3c.dom.CanvasRenderingContext2D
import org.w3c.dom.HTMLCanvasElement
import kotlin.browser.document
import kotlin.browser.window
import kotlin.js.Math



val canvas = initalizeCanvas()
fun initalizeCanvas(): HTMLCanvasElement {
    val canvas = document.createElement(&amp;#34;canvas&amp;#34;) as HTMLCanvasElement
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    context.canvas.width  = window.innerWidth.toInt();
    context.canvas.height = window.innerHeight.toInt();
    document.body!!.appendChild(canvas)
    return canvas
}

class FancyLines() {
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    val height = canvas.height
    val width = canvas.width
    var x = width * Math.random()
    var y = height * Math.random()
    var hue = 0;

    fun line() {
        context.save();

        context.beginPath();

        context.lineWidth = 20.0 * Math.random();
        context.moveTo(x, y);

        x = width * Math.random();
        y = height * Math.random();

        context.bezierCurveTo(width * Math.random(), height * Math.random(),
                width * Math.random(), height * Math.random(), x, y);

        hue += (Math.random() * 10).toInt();

        context.strokeStyle = &amp;#34;hsl($hue, 50%, 50%)&amp;#34;;

        context.shadowColor = &amp;#34;white&amp;#34;;
        context.shadowBlur = 10.0;

        context.stroke();

        context.restore();
    }

    fun blank() {
        context.fillStyle = &amp;#34;rgba(255,255,1,0.1)&amp;#34;;
        context.fillRect(0.0, 0.0, width.toDouble(), height.toDouble());
    }

    fun run() {
        window.setInterval({ line() }, 40);
        window.setInterval({ blank() }, 100);
    }
}
//sampleStart
fun main(args: Array&amp;lt;String&amp;gt;) {
    FancyLines().run()
}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
//sampleStart
fun sum(a: Int, b: Int): Int {
    return a + b
}
//sampleEnd

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jetbrains.github.io/kotlin-playground/examples/&#34;&gt;https://jetbrains.github.io/kotlin-playground/examples/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>