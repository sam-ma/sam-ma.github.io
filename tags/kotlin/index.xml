<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Home</title>
    <link>https://www.shenyan.me/tags/kotlin/</link>
    <description>Recent content in Kotlin on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jul 2018 20:51:46 +1000</lastBuildDate>
    
        <atom:link href="https://www.shenyan.me/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin Collections SQL Group By</title>
      <link>https://www.shenyan.me/kotlin/kotlin-collections-sql-group-by/</link>
      <pubDate>Fri, 06 Jul 2018 20:51:46 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/kotlin-collections-sql-group-by/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;https://www.shenyan.me/java/java-8-stream-sql-group-by&#34;&gt;Java 8 Stream SQL Group By&lt;/a&gt; we explored how to perform SQL similar group by and aggregation by using Java 8 stream API. This time we&amp;rsquo;re going to do it in Kotlin.&lt;/p&gt;

&lt;p&gt;First of all, we use &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Kotlin Data Class&lt;/a&gt; to implement our &lt;code&gt;Data&lt;/code&gt; class. As you can easily tell, it&amp;rsquo;s much shorter than the Java equivalent.&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
data class Data(val dcId: String, val dbGroup: String, val week: String, var acctVal: Long, var shopVal: Long, var partVal: Long, var backVal: Long) {
    fun merge(other: Data): Data {
        this.acctVal += other.acctVal;
        this.shopVal += other.shopVal;
        this.partVal += other.partVal;
        this.backVal += other.backVal;
        return this;
    }
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We use the &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html&#34;&gt;&lt;code&gt;listof&lt;/code&gt;&lt;/a&gt; to initialize our test data, which is similar to &lt;code&gt;Arrays.asList&lt;/code&gt; Java API.&lt;/p&gt;

&lt;p&gt;Our calculation starts from &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html&#34;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; which takes a lambda expression &lt;code&gt;{ it.dcId }&lt;/code&gt; as parameter to specify the groupBy key. After that we will get a &lt;code&gt;Map&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt;&lt;/code&gt;, where the key is &lt;code&gt;dcId&lt;/code&gt; and value is a list of &lt;code&gt;Data&lt;/code&gt; associated with the key.&lt;/p&gt;

&lt;p&gt;Then we use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-values.html&#34;&gt;&lt;code&gt;mapValues&lt;/code&gt;&lt;/a&gt; to process the grouped list of &lt;code&gt;Data&lt;/code&gt; further. It accepts a transform function. In this function &lt;code&gt;{ it.value.groupBy { it.dbGroup } }&lt;/code&gt; we use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html&#34;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; again to further group data by &lt;code&gt;dbGroup&lt;/code&gt;. After that we will get a &lt;code&gt;Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We do the same to group data by &lt;code&gt;week&lt;/code&gt; further. At this stage we are done with groupBy. We now use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html&#34;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; to aggregation grouped data.&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
data.groupBy { it.dcId /* it: Data */ }
    .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
        it.value.groupBy { it.dbGroup /* it: Data */ }
                .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                    it.value.groupBy { it.week /* it: Data */ }
                            .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                                it.value.reduce(Data::merge)
                            }
                }
    }

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Finally we use &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flat-map.html&#34;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; to collect the result list.&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
.flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt;&amp;gt; */
    it.value.flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt; */
                it.value.map { /* it: Map.Entry&amp;lt;String, Data&amp;gt; */
                            it.value
                        }
            }
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Here is the full source:
&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
data class Data(val dcId: String, val dbGroup: String, val week: String, var acctVal: Long, var shopVal: Long, var partVal: Long, var backVal: Long) {
    fun merge(other: Data): Data {
        this.acctVal += other.acctVal;
        this.shopVal += other.shopVal;
        this.partVal += other.partVal;
        this.backVal += other.backVal;
        return this;
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    val data = listOf(
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 111L, 211L, 311L, 411L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 121L, 221L, 321L, 421L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 131L, 231L, 331L, 431L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 141L, 241L, 341L, 441L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 112L, 212L, 312L, 412L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 122L, 222L, 322L, 422L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 132L, 232L, 332L, 432L),
            Data(&amp;#34;dc000&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 142L, 242L, 342L, 442L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 111L, 211L, 311L, 411L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 121L, 221L, 321L, 421L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week1&amp;#34;, 131L, 231L, 331L, 431L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week1&amp;#34;, 141L, 241L, 341L, 441L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 112L, 212L, 312L, 412L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 122L, 222L, 322L, 422L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup01&amp;#34;, &amp;#34;week2&amp;#34;, 132L, 232L, 332L, 432L),
            Data(&amp;#34;dc001&amp;#34;, &amp;#34;dbGroup02&amp;#34;, &amp;#34;week2&amp;#34;, 142L, 242L, 342L, 442L)
    )

    println(&amp;#34;Before merge:&amp;#34;)
    data.forEach { println(it) }
    val mergedData /* : List&amp;lt;Data&amp;gt; */ = data.groupBy { it.dcId /* it: Data */ }
            .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                it.value.groupBy { it.dbGroup /* it: Data */ }
                        .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                            it.value.groupBy { it.week /* it: Data */ }
                                    .mapValues { /* it: Map.Entry&amp;lt;String, List&amp;lt;Data&amp;gt;&amp;gt; */
                                        it.value.reduce(Data::merge)
                                    }
                        }
            }
            .flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt;&amp;gt; */
                it.value.flatMap { /* it: Map.Entry&amp;lt;String, Map&amp;lt;String, Data&amp;gt;&amp;gt; */
                            it.value.map { /* it: Map.Entry&amp;lt;String, Data&amp;gt; */
                                        it.value
                                    }
                        }
            }
    println(&amp;#34;After merge:&amp;#34;)
    mergedData.forEach { println(it) }
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Kotlin Data Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html&#34;&gt;Kotlin Collections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Kotlin Shortcodes</title>
      <link>https://www.shenyan.me/kotlin/hugo-kotlin-shortcodes/</link>
      <pubDate>Mon, 25 Jun 2018 20:51:24 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/hugo-kotlin-shortcodes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;Hugo Kotlin shortcodes&lt;/a&gt; can be used to &lt;a href=&#34;https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/&#34;&gt;embed kotlin playground&lt;/a&gt; into Hugo sites.&lt;/p&gt;

&lt;h2 id=&#34;set-up&#34;&gt;Set up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Copy &lt;code&gt;layouts/shortcodes/kotlin.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/shortcodes/kotlin.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2. Copy &lt;code&gt;[your hugo site home]/themes/[the theme you choose]/layouts/partials/head.html&lt;/code&gt; to &lt;code&gt;[your hugo site home]/layouts/partials/header.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3. Open the copied &lt;code&gt;header.html&lt;/code&gt; and add the followings into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- kotlin playground script --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://unpkg.com/kotlin-playground@1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data-selector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.kotlin-code&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- highlight css --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- highlight script --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/kotlin.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hljs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;initHighlightingOnLoad&lt;/span&gt;();&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;how-to-use-live-demo&#34;&gt;How to use / Live Demo&lt;/h2&gt;

&lt;p&gt;The following examples demonstrates how to embed &lt;a href=&#34;https://jetbrains.github.io/kotlin-playground/examples/&#34;&gt;kotlin playground examples&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Basic example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Contact&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; email: String) 
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; contact = Contact(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mary@gmail.com&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6&lt;/span&gt;    println(contact.id)                   
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;8&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
class Contact(val id: Int, var email: String) 

fun main(args: Array&amp;lt;String&amp;gt;) {
    val contact = Contact(1, &amp;#34;mary@gmail.com&amp;#34;)
    println(contact.id)                   
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;2. Example using &lt;code&gt;theme&lt;/code&gt; and &lt;code&gt;highlight-only&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin theme=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;idea&amp;#34;&lt;/span&gt; highlight-only=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;idea&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;3. Example using &lt;code&gt;darcula&lt;/code&gt; theme&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin theme=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darcula&amp;#34;&lt;/span&gt; highlight-only=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;4. Example using &lt;code&gt;platform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(a: Int, b: Int): Int {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a + b
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7&lt;/span&gt;    print(sum(-&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;8&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;9&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;js&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun sum(a: Int, b: Int): Int {
    return a + b
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;5. Example using &lt;code&gt;junit&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;junit&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Test
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Assert
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestExtensionFunctions&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testIntExtension&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7&lt;/span&gt;        Assert.assertEquals(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rational number creation error: &amp;#34;&lt;/span&gt;, RationalNumber(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;r())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPairExtension&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11&lt;/span&gt;        Assert.assertEquals(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rational number creation error: &amp;#34;&lt;/span&gt;, RationalNumber(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), Pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).r())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleStart
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;.r(): RationalNumber = RationalNumber(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RationalNumber&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; numerator: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; denominator: Int)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleEnd
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestExtensionFunctions() {
    @Test fun testIntExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(4, 1), 4.r())
    }

    @Test fun testPairExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(2, 3), Pair(2, 3).r())
    }
}
//sampleStart
/*
Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
*/
fun Int.r(): RationalNumber = RationalNumber(this, 2)
fun Pair&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)

data class RationalNumber(val numerator: Int, val denominator: Int)
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;6. Example using &lt;code&gt;folded-button&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;junit&amp;#34;&lt;/span&gt; folded-button=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Test
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.junit.Assert
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestContainsFunctions&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7&lt;/span&gt;        Assert.assertTrue(containsEven(listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9&lt;/span&gt;    @Test &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notContains&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10&lt;/span&gt;        Assert.assertFalse(containsEven(listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleStart
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Pass a lambda to any function to check if the collection contains an even number.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsEven&lt;/span&gt;(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {&lt;span style=&#34;color:#a6e22e&#34;&gt;[mark]&lt;/span&gt;TODO()&lt;span style=&#34;color:#a6e22e&#34;&gt;[/mark]&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleEnd
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    folded-button=&#34;false&#34;
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestContainsFunctions() {
    @Test fun contains() {
        Assert.assertTrue(containsEven(listOf(1, 2, 3, 4)));
    }
    @Test fun notContains() {
        Assert.assertFalse(containsEven(listOf(1, 3, 5)));
    }
}
//sampleStart
/*
Pass a lambda to any function to check if the collection contains an even number.
The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
*/
fun containsEven(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {[mark]TODO()[/mark]}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7. Example using &lt;code&gt;canvas&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1&lt;/span&gt;{{&amp;lt; kotlin platform=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt; &amp;gt;}}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; fancylines
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; jquery.*
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.w3c.dom.CanvasRenderingContext2D
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.w3c.dom.HTMLCanvasElement
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; kotlin.browser.document
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; kotlin.browser.window
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; kotlin.js.Math
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; canvas = initalizeCanvas()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initalizeCanvas&lt;/span&gt;(): HTMLCanvasElement {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; canvas = document.createElement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HTMLCanvasElement
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; context = canvas.getContext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CanvasRenderingContext2D
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18&lt;/span&gt;    context.canvas.width  = window.innerWidth.toInt();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19&lt;/span&gt;    context.canvas.height = window.innerHeight.toInt();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20&lt;/span&gt;    document.body&lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;.appendChild(canvas)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;21&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; canvas
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;22&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;23&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FancyLines&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;25&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; context = canvas.getContext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CanvasRenderingContext2D
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;26&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; height = canvas.height
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;27&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; width = canvas.width
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;28&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; x = width * Math.random()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;29&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; y = height * Math.random()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;30&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hue = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;31&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;32&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;33&lt;/span&gt;        context.save();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;34&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;35&lt;/span&gt;        context.beginPath();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;36&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;37&lt;/span&gt;        context.lineWidth = &lt;span style=&#34;color:#ae81ff&#34;&gt;20.0&lt;/span&gt; * Math.random();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;38&lt;/span&gt;        context.moveTo(x, y);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;39&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;40&lt;/span&gt;        x = width * Math.random();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;41&lt;/span&gt;        y = height * Math.random();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;42&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;43&lt;/span&gt;        context.bezierCurveTo(width * Math.random(), height * Math.random(),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;44&lt;/span&gt;                width * Math.random(), height * Math.random(), x, y);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;45&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;46&lt;/span&gt;        hue += (Math.random() * &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;).toInt();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;47&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;48&lt;/span&gt;        context.strokeStyle = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hsl($hue, 50%, 50%)&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;49&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;50&lt;/span&gt;        context.shadowColor = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;51&lt;/span&gt;        context.shadowBlur = &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;52&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;53&lt;/span&gt;        context.stroke();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;54&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;55&lt;/span&gt;        context.restore();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;56&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;57&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;58&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blank&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;59&lt;/span&gt;        context.fillStyle = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rgba(255,255,1,0.1)&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;60&lt;/span&gt;        context.fillRect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, width.toDouble(), height.toDouble());
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;61&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;62&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;63&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;64&lt;/span&gt;        window.setInterval({ line() }, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;65&lt;/span&gt;        window.setInterval({ blank() }, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;66&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;67&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleStart
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;70&lt;/span&gt;    FancyLines().run()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;71&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//sampleEnd
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;73&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{{&amp;lt; /kotlin &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;canvas&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
package fancylines


import jquery.*
import org.w3c.dom.CanvasRenderingContext2D
import org.w3c.dom.HTMLCanvasElement
import kotlin.browser.document
import kotlin.browser.window
import kotlin.js.Math



val canvas = initalizeCanvas()
fun initalizeCanvas(): HTMLCanvasElement {
    val canvas = document.createElement(&amp;#34;canvas&amp;#34;) as HTMLCanvasElement
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    context.canvas.width  = window.innerWidth.toInt();
    context.canvas.height = window.innerHeight.toInt();
    document.body!!.appendChild(canvas)
    return canvas
}

class FancyLines() {
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    val height = canvas.height
    val width = canvas.width
    var x = width * Math.random()
    var y = height * Math.random()
    var hue = 0;

    fun line() {
        context.save();

        context.beginPath();

        context.lineWidth = 20.0 * Math.random();
        context.moveTo(x, y);

        x = width * Math.random();
        y = height * Math.random();

        context.bezierCurveTo(width * Math.random(), height * Math.random(),
                width * Math.random(), height * Math.random(), x, y);

        hue += (Math.random() * 10).toInt();

        context.strokeStyle = &amp;#34;hsl($hue, 50%, 50%)&amp;#34;;

        context.shadowColor = &amp;#34;white&amp;#34;;
        context.shadowBlur = 10.0;

        context.stroke();

        context.restore();
    }

    fun blank() {
        context.fillStyle = &amp;#34;rgba(255,255,1,0.1)&amp;#34;;
        context.fillRect(0.0, 0.0, width.toDouble(), height.toDouble());
    }

    fun run() {
        window.setInterval({ line() }, 40);
        window.setInterval({ blank() }, 100);
    }
}
//sampleStart
fun main(args: Array&amp;lt;String&amp;gt;) {
    FancyLines().run()
}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Kotlin Shortcodes Example</title>
      <link>https://www.shenyan.me/kotlin/hugo-kotlin-example/</link>
      <pubDate>Fri, 22 Jun 2018 21:41:35 +1000</pubDate>
      
      <guid>https://www.shenyan.me/kotlin/hugo-kotlin-example/</guid>
      <description>&lt;p&gt;This is the live demo page for the &lt;code&gt;{{&amp;lt; kotlin &amp;gt;}}&lt;/code&gt; hugo shortcode&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sam-ma/hugo-shortcodes&#34;&gt;https://github.com/sam-ma/hugo-shortcodes&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
class Contact(val id: Int, var email: String) 

fun main(args: Array&amp;lt;String&amp;gt;) {
    val contact = Contact(1, &amp;#34;mary@gmail.com&amp;#34;)
    println(contact.id)                   
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;idea&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
    data-highlight-only &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun main(args: Array&amp;lt;String&amp;gt;) {
    println(&amp;#34;Hello World!&amp;#34;)
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;js&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
fun sum(a: Int, b: Int): Int {
    return a + b
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestExtensionFunctions() {
    @Test fun testIntExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(4, 1), 4.r())
    }

    @Test fun testPairExtension() {
        Assert.assertEquals(&amp;#34;Rational number creation error: &amp;#34;, RationalNumber(2, 3), Pair(2, 3).r())
    }
}
//sampleStart
/*
Then implement extension functions Int.r() and Pair.r() and make them convert Int and Pair to RationalNumber.
*/
fun Int.r(): RationalNumber = RationalNumber(this, 2)
fun Pair&amp;lt;Int, Int&amp;gt;.r(): RationalNumber = RationalNumber(first, second)

data class RationalNumber(val numerator: Int, val denominator: Int)
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;junit&#34;
    folded-button=&#34;false&#34;
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
import org.junit.Test
import org.junit.Assert

class TestContainsFunctions() {
    @Test fun contains() {
        Assert.assertTrue(containsEven(listOf(1, 2, 3, 4)));
    }
    @Test fun notContains() {
        Assert.assertFalse(containsEven(listOf(1, 3, 5)));
    }
}
//sampleStart
/*
Pass a lambda to any function to check if the collection contains an even number.
The function any gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.
*/
fun containsEven(collection: Collection&amp;lt;Int&amp;gt;): Boolean = collection.any {[mark]TODO()[/mark]}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
     
    data-target-platform=&#34;canvas&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
package fancylines


import jquery.*
import org.w3c.dom.CanvasRenderingContext2D
import org.w3c.dom.HTMLCanvasElement
import kotlin.browser.document
import kotlin.browser.window
import kotlin.js.Math



val canvas = initalizeCanvas()
fun initalizeCanvas(): HTMLCanvasElement {
    val canvas = document.createElement(&amp;#34;canvas&amp;#34;) as HTMLCanvasElement
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    context.canvas.width  = window.innerWidth.toInt();
    context.canvas.height = window.innerHeight.toInt();
    document.body!!.appendChild(canvas)
    return canvas
}

class FancyLines() {
    val context = canvas.getContext(&amp;#34;2d&amp;#34;) as CanvasRenderingContext2D
    val height = canvas.height
    val width = canvas.width
    var x = width * Math.random()
    var y = height * Math.random()
    var hue = 0;

    fun line() {
        context.save();

        context.beginPath();

        context.lineWidth = 20.0 * Math.random();
        context.moveTo(x, y);

        x = width * Math.random();
        y = height * Math.random();

        context.bezierCurveTo(width * Math.random(), height * Math.random(),
                width * Math.random(), height * Math.random(), x, y);

        hue += (Math.random() * 10).toInt();

        context.strokeStyle = &amp;#34;hsl($hue, 50%, 50%)&amp;#34;;

        context.shadowColor = &amp;#34;white&amp;#34;;
        context.shadowBlur = 10.0;

        context.stroke();

        context.restore();
    }

    fun blank() {
        context.fillStyle = &amp;#34;rgba(255,255,1,0.1)&amp;#34;;
        context.fillRect(0.0, 0.0, width.toDouble(), height.toDouble());
    }

    fun run() {
        window.setInterval({ line() }, 40);
        window.setInterval({ blank() }, 100);
    }
}
//sampleStart
fun main(args: Array&amp;lt;String&amp;gt;) {
    FancyLines().run()
}
//sampleEnd

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;kotlin-code&#34; 
    theme=&#34;darcula&#34; 
    data-target-platform=&#34;java&#34;
    
     &gt;
    &lt;pre&gt;
        &lt;code class=&#34;hljs language-kotlin&#34;&gt;
        
//sampleStart
fun sum(a: Int, b: Int): Int {
    return a + b
}
//sampleEnd

fun main(args: Array&amp;lt;String&amp;gt;) {
    print(sum(-1, 8))
}

        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jetbrains.github.io/kotlin-playground/examples/&#34;&gt;https://jetbrains.github.io/kotlin-playground/examples/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>